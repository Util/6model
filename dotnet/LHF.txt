"Low Hanging Fruit"
===================

This file contains tasks that should be relatively small and easy. If
you want to start hacking on the 6model implementation on .Net, this
is a great way to jump in! Questions? Try catching jnthn on #perl6
on freenode.

Run optimizer when -O is passed
-------------------------------
DIFFICULTY: Easy
SKILLS: PIR
DETAILS:
At the moment, NQPOptimizer.pm is enabled/disabled by commenting stuff
out in compile.pir. So it's easier to try things with/without it, add
a -O flag that, when passed, runs the optimizer.

Simple Configure System
-----------------------
DIFFICULTY: Easy-Intermediate
SKILLS: Perl, Makefiles
DETAILS:
At the moment, people on non-Windows systems have to manually hack in
some aliases to get a working build. To improve things:
1) Create a build directory with a Makefile.in.
2) Create a Configure.pl that looks for msbuild or xbuild and picks
   the one that exists. It should do similar for csc vs gmcs. (In
   general, msbuild/csc will be available on Windows, and xbuild/
   gmcs will be elsewhere, since those are the Mono variants). It
   should then substitute for these into Makefile.in using some
   placeholder scheme to generate a Makefile that will work.
3) If none of msbuild or xbuild are in the path, warn that no build
   tool is available. Same for csc and gmcs. Try and make the message
   helpful as to what the user might need. :-)

Foundation for .WHO support
---------------------------
DIFFICULTY: Intermediate
SKILLS: NQP, C#
DETAILS:
At the moment, there is no link between a type object and its
underlying package (generally, an NQPStash). This task lays the
foundation for getting that in place. To do this:
1) Add a WHO field to SharedTable (follow how .WHAT and .HOW look).
2) Write get_who and set_who ops that take in a RakudoObject and
   get and set the STable.WHO (the set one takes in a second
   RakudoObject).
3) Edit Actions.pm and make .WHO use the get_who op (see .WHAT and
   .HOW for examples).
